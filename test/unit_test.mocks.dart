// Mocks generated by Mockito 5.4.4 from annotations
// in diet_macro/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:diet_macro/data/datasources/local/isar_datasource.dart' as _i2;
import 'package:diet_macro/data/datasources/remote/food_search_api.dart' as _i5;
import 'package:diet_macro/data/models/isar_data.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IsarDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarDatasource extends _i1.Mock implements _i2.IsarDatasource {
  @override
  List<_i3.DailyData> get dailyDataList => (super.noSuchMethod(
        Invocation.getter(#dailyDataList),
        returnValue: <_i3.DailyData>[],
        returnValueForMissingStub: <_i3.DailyData>[],
      ) as List<_i3.DailyData>);

  @override
  _i4.Future<void> createDailyData(
    DateTime? date,
    int? calories,
    int? carb,
    int? protein,
    int? fat,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDailyData,
          [
            date,
            calories,
            carb,
            protein,
            fat,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> createTargetData(
    int? targetCalories,
    int? targetCarb,
    int? targetProtein,
    int? targetFat,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTargetData,
          [
            targetCalories,
            targetCarb,
            targetProtein,
            targetFat,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.DailyData>> getAllDailyData() => (super.noSuchMethod(
        Invocation.method(
          #getAllDailyData,
          [],
        ),
        returnValue: _i4.Future<List<_i3.DailyData>>.value(<_i3.DailyData>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.DailyData>>.value(<_i3.DailyData>[]),
      ) as _i4.Future<List<_i3.DailyData>>);

  @override
  _i4.Future<_i3.DailyData?> getDailyDataByDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyDataByDate,
          [date],
        ),
        returnValue: _i4.Future<_i3.DailyData?>.value(),
        returnValueForMissingStub: _i4.Future<_i3.DailyData?>.value(),
      ) as _i4.Future<_i3.DailyData?>);

  @override
  _i4.Future<_i3.TargetData?> getTargetData() => (super.noSuchMethod(
        Invocation.method(
          #getTargetData,
          [],
        ),
        returnValue: _i4.Future<_i3.TargetData?>.value(),
        returnValueForMissingStub: _i4.Future<_i3.TargetData?>.value(),
      ) as _i4.Future<_i3.TargetData?>);

  @override
  _i4.Future<void> updateDailyData(_i3.DailyData? dailyData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDailyData,
          [dailyData],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTargetData(_i3.TargetData? targetData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTargetData,
          [targetData],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDailyData(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDailyData,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllDailyData() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllDailyData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTargetData(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTargetData,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [FoodSearchApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodSearchApi extends _i1.Mock implements _i5.FoodSearchApi {
  @override
  _i4.Future<String> fetchFoodNutrition(String? foodName) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFoodNutrition,
          [foodName],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #fetchFoodNutrition,
            [foodName],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #fetchFoodNutrition,
            [foodName],
          ),
        )),
      ) as _i4.Future<String>);
}
